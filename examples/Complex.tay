object "ComplexStore" {
  code {
    datacopy(0, dataoffset("Runtime"), datasize("Runtime"))
    return(0, datasize("Runtime"))
  }
  object "Runtime" {
    code {
      const _calldata := 128
      // calldatacopy(_calldata, 0, 36)

      // 4 + 4 + 32 + 8 + 4 + 12 = 64
      calldatacopy(_calldata, 0, calldatasize())

      // dtmstruct Calldata2(abi"(EthereumFunctionSignature sig, u256 val)")
      dtmstruct Calldata(
          sig: dt.EthereumFunctionSignature,  // 4
          val: dt.u32,                        // 4
          somearr: dt.u32array2,              // 8
          somearr2: dt.u32array,
          val2: dt.u256,                      // 32
          balance: dt.Balance,                // 20 + 4 = 24
          wallet: dt.address,                 // 20
          rectangle: dt.Rectangle             // 8 + 4 = 12
      )

      switch Calldata.sig(_calldata) // select signature from memory

      case dtsig"function store(u32 val)" { // new signature method
        sstore(0, Calldata.val(_calldata)) // sstore calldata value
      }

      case dtsig"function get() view public returns (u32)" {
        mstore(0, sload(0))
        return (0, 32)
      }

      case dtsig"function addone(u256) view public returns (u256)" {
        mstore(0, add(Calldata.val2(_calldata), 1))
        return (0, 32)
      }

      case dtsig"function getArrayItem() view public returns(u32)" {
        let index := 0
        mstore(0, Calldata.somearr(_calldata, index))
        return (0, 32)
      }

      case dtsig"function getDynArrayItem() view public returns(u32)" {
        let index := 1
        mstore(0, Calldata.somearr2(_calldata, index))
        return (0, 32)
      }

      case dtsig"function storeBalance(address owner, Balance balance)" {
        sstore(0, Calldata.balance.value(_calldata))
        sstore(4, Calldata.balance.token(_calldata))
      }

      case dtsig"function getBalance(address owner) view public returns (Balance balance)" {
        mstore(0, sload(0))
        mstore(32, sload(4))
        return (0, 64)
      }

      case dtsig"function getRectangle() view public returns (Rectangle rect)" {
        mstore(0, Calldata.rectangle.dimensions(_calldata, 0))
        mstore(32, Calldata.rectangle.value(_calldata))
        return (0, 64)
      }

      case dtsig"function getBalance() view public returns (Balance balance)" {
        mstore(0, Calldata.balance.value(_calldata))
        mstore(32, Calldata.balance.token(_calldata))
        return (0, 64)
      }
    }
  }
}
